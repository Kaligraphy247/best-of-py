// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "projects",
    columns: [
      { name: "title", type: "string", notNull: true, defaultValue: '""' },
      { name: "imageSrc", type: "string" },
      { name: "description", type: "string" },
      { name: "projectUrl", type: "string" },
      { name: "altText", type: "string" },
      { name: "githubUrl", type: "string" },
      { name: "projectWebsite", type: "string" },
      { name: "pypiUrl", type: "string" },
      { name: "tags", type: "multiple" },
    ],
  },
  {
    name: "tags",
    columns: [
      { name: "tag", type: "string", notNull: true, defaultValue: '""' },
      { name: "tagUrl", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Projects = InferredTypes["projects"];
export type ProjectsRecord = Projects & XataRecord;

export type Tags = InferredTypes["tags"];
export type TagsRecord = Tags & XataRecord;

export type DatabaseSchema = {
  projects: ProjectsRecord;
  tags: TagsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Kaligraphy247-dqb2ur.us-east-1.xata.sh/db/my-database",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
